
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export interface PrismaPromise<A> extends Promise<A> {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  email: string
  password: string
  username: string
  teacher: boolean
}

/**
 * Model inviteLinks
 * 
 */
export type inviteLinks = {
  id: string
  teacherId: string
  classId: string
  maxUses: number
}

/**
 * Model Students
 * 
 */
export type Students = {
  id: number
  userId: string
  admin: boolean
}

/**
 * Model Surveys
 * 
 */
export type Surveys = {
  id: number
  teacherId: string
}

/**
 * Model Questions
 * 
 */
export type Questions = {
  id: number
  value: string
  type: string
  surveyId: string
}

/**
 * Model SessionId
 * 
 */
export type SessionId = {
  sessionId: string
  expiration: string
  userId: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.inviteLinks`: Exposes CRUD operations for the **inviteLinks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InviteLinks
    * const inviteLinks = await prisma.inviteLinks.findMany()
    * ```
    */
  get inviteLinks(): Prisma.inviteLinksDelegate<GlobalReject>;

  /**
   * `prisma.students`: Exposes CRUD operations for the **Students** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.students.findMany()
    * ```
    */
  get students(): Prisma.StudentsDelegate<GlobalReject>;

  /**
   * `prisma.surveys`: Exposes CRUD operations for the **Surveys** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Surveys
    * const surveys = await prisma.surveys.findMany()
    * ```
    */
  get surveys(): Prisma.SurveysDelegate<GlobalReject>;

  /**
   * `prisma.questions`: Exposes CRUD operations for the **Questions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.questions.findMany()
    * ```
    */
  get questions(): Prisma.QuestionsDelegate<GlobalReject>;

  /**
   * `prisma.sessionId`: Exposes CRUD operations for the **SessionId** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionIds
    * const sessionIds = await prisma.sessionId.findMany()
    * ```
    */
  get sessionId(): Prisma.SessionIdDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.9.0
   * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    inviteLinks: 'inviteLinks',
    Students: 'Students',
    Surveys: 'Surveys',
    Questions: 'Questions',
    SessionId: 'SessionId'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    sessions: number
  }

  export type UserCountOutputTypeSelect = {
    sessions?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    username: string | null
    teacher: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    username: string | null
    teacher: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    username: number
    teacher: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    teacher?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    teacher?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    teacher?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    username: string
    teacher: boolean
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    username?: boolean
    teacher?: boolean
    sessions?: boolean | User$sessionsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    sessions?: boolean | User$sessionsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'sessions' ? Array < SessionIdGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'sessions' ? Array < SessionIdGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sessions<T extends User$sessionsArgs= {}>(args?: Subset<T, User$sessionsArgs>): PrismaPromise<Array<SessionIdGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.sessions
   */
  export type User$sessionsArgs = {
    /**
     * Select specific fields to fetch from the SessionId
     */
    select?: SessionIdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionIdInclude | null
    where?: SessionIdWhereInput
    orderBy?: Enumerable<SessionIdOrderByWithRelationInput>
    cursor?: SessionIdWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SessionIdScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model inviteLinks
   */


  export type AggregateInviteLinks = {
    _count: InviteLinksCountAggregateOutputType | null
    _avg: InviteLinksAvgAggregateOutputType | null
    _sum: InviteLinksSumAggregateOutputType | null
    _min: InviteLinksMinAggregateOutputType | null
    _max: InviteLinksMaxAggregateOutputType | null
  }

  export type InviteLinksAvgAggregateOutputType = {
    maxUses: number | null
  }

  export type InviteLinksSumAggregateOutputType = {
    maxUses: number | null
  }

  export type InviteLinksMinAggregateOutputType = {
    id: string | null
    teacherId: string | null
    classId: string | null
    maxUses: number | null
  }

  export type InviteLinksMaxAggregateOutputType = {
    id: string | null
    teacherId: string | null
    classId: string | null
    maxUses: number | null
  }

  export type InviteLinksCountAggregateOutputType = {
    id: number
    teacherId: number
    classId: number
    maxUses: number
    _all: number
  }


  export type InviteLinksAvgAggregateInputType = {
    maxUses?: true
  }

  export type InviteLinksSumAggregateInputType = {
    maxUses?: true
  }

  export type InviteLinksMinAggregateInputType = {
    id?: true
    teacherId?: true
    classId?: true
    maxUses?: true
  }

  export type InviteLinksMaxAggregateInputType = {
    id?: true
    teacherId?: true
    classId?: true
    maxUses?: true
  }

  export type InviteLinksCountAggregateInputType = {
    id?: true
    teacherId?: true
    classId?: true
    maxUses?: true
    _all?: true
  }

  export type InviteLinksAggregateArgs = {
    /**
     * Filter which inviteLinks to aggregate.
     */
    where?: inviteLinksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inviteLinks to fetch.
     */
    orderBy?: Enumerable<inviteLinksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: inviteLinksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inviteLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inviteLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned inviteLinks
    **/
    _count?: true | InviteLinksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InviteLinksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InviteLinksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InviteLinksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InviteLinksMaxAggregateInputType
  }

  export type GetInviteLinksAggregateType<T extends InviteLinksAggregateArgs> = {
        [P in keyof T & keyof AggregateInviteLinks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInviteLinks[P]>
      : GetScalarType<T[P], AggregateInviteLinks[P]>
  }




  export type InviteLinksGroupByArgs = {
    where?: inviteLinksWhereInput
    orderBy?: Enumerable<inviteLinksOrderByWithAggregationInput>
    by: InviteLinksScalarFieldEnum[]
    having?: inviteLinksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InviteLinksCountAggregateInputType | true
    _avg?: InviteLinksAvgAggregateInputType
    _sum?: InviteLinksSumAggregateInputType
    _min?: InviteLinksMinAggregateInputType
    _max?: InviteLinksMaxAggregateInputType
  }


  export type InviteLinksGroupByOutputType = {
    id: string
    teacherId: string
    classId: string
    maxUses: number
    _count: InviteLinksCountAggregateOutputType | null
    _avg: InviteLinksAvgAggregateOutputType | null
    _sum: InviteLinksSumAggregateOutputType | null
    _min: InviteLinksMinAggregateOutputType | null
    _max: InviteLinksMaxAggregateOutputType | null
  }

  type GetInviteLinksGroupByPayload<T extends InviteLinksGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InviteLinksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InviteLinksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InviteLinksGroupByOutputType[P]>
            : GetScalarType<T[P], InviteLinksGroupByOutputType[P]>
        }
      >
    >


  export type inviteLinksSelect = {
    id?: boolean
    teacherId?: boolean
    classId?: boolean
    maxUses?: boolean
  }


  export type inviteLinksGetPayload<S extends boolean | null | undefined | inviteLinksArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? inviteLinks :
    S extends undefined ? never :
    S extends { include: any } & (inviteLinksArgs | inviteLinksFindManyArgs)
    ? inviteLinks 
    : S extends { select: any } & (inviteLinksArgs | inviteLinksFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof inviteLinks ? inviteLinks[P] : never
  } 
      : inviteLinks


  type inviteLinksCountArgs = 
    Omit<inviteLinksFindManyArgs, 'select' | 'include'> & {
      select?: InviteLinksCountAggregateInputType | true
    }

  export interface inviteLinksDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one InviteLinks that matches the filter.
     * @param {inviteLinksFindUniqueArgs} args - Arguments to find a InviteLinks
     * @example
     * // Get one InviteLinks
     * const inviteLinks = await prisma.inviteLinks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends inviteLinksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, inviteLinksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'inviteLinks'> extends True ? Prisma__inviteLinksClient<inviteLinksGetPayload<T>> : Prisma__inviteLinksClient<inviteLinksGetPayload<T> | null, null>

    /**
     * Find one InviteLinks that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {inviteLinksFindUniqueOrThrowArgs} args - Arguments to find a InviteLinks
     * @example
     * // Get one InviteLinks
     * const inviteLinks = await prisma.inviteLinks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends inviteLinksFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, inviteLinksFindUniqueOrThrowArgs>
    ): Prisma__inviteLinksClient<inviteLinksGetPayload<T>>

    /**
     * Find the first InviteLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inviteLinksFindFirstArgs} args - Arguments to find a InviteLinks
     * @example
     * // Get one InviteLinks
     * const inviteLinks = await prisma.inviteLinks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends inviteLinksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, inviteLinksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'inviteLinks'> extends True ? Prisma__inviteLinksClient<inviteLinksGetPayload<T>> : Prisma__inviteLinksClient<inviteLinksGetPayload<T> | null, null>

    /**
     * Find the first InviteLinks that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inviteLinksFindFirstOrThrowArgs} args - Arguments to find a InviteLinks
     * @example
     * // Get one InviteLinks
     * const inviteLinks = await prisma.inviteLinks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends inviteLinksFindFirstOrThrowArgs>(
      args?: SelectSubset<T, inviteLinksFindFirstOrThrowArgs>
    ): Prisma__inviteLinksClient<inviteLinksGetPayload<T>>

    /**
     * Find zero or more InviteLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inviteLinksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InviteLinks
     * const inviteLinks = await prisma.inviteLinks.findMany()
     * 
     * // Get first 10 InviteLinks
     * const inviteLinks = await prisma.inviteLinks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inviteLinksWithIdOnly = await prisma.inviteLinks.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends inviteLinksFindManyArgs>(
      args?: SelectSubset<T, inviteLinksFindManyArgs>
    ): PrismaPromise<Array<inviteLinksGetPayload<T>>>

    /**
     * Create a InviteLinks.
     * @param {inviteLinksCreateArgs} args - Arguments to create a InviteLinks.
     * @example
     * // Create one InviteLinks
     * const InviteLinks = await prisma.inviteLinks.create({
     *   data: {
     *     // ... data to create a InviteLinks
     *   }
     * })
     * 
    **/
    create<T extends inviteLinksCreateArgs>(
      args: SelectSubset<T, inviteLinksCreateArgs>
    ): Prisma__inviteLinksClient<inviteLinksGetPayload<T>>

    /**
     * Delete a InviteLinks.
     * @param {inviteLinksDeleteArgs} args - Arguments to delete one InviteLinks.
     * @example
     * // Delete one InviteLinks
     * const InviteLinks = await prisma.inviteLinks.delete({
     *   where: {
     *     // ... filter to delete one InviteLinks
     *   }
     * })
     * 
    **/
    delete<T extends inviteLinksDeleteArgs>(
      args: SelectSubset<T, inviteLinksDeleteArgs>
    ): Prisma__inviteLinksClient<inviteLinksGetPayload<T>>

    /**
     * Update one InviteLinks.
     * @param {inviteLinksUpdateArgs} args - Arguments to update one InviteLinks.
     * @example
     * // Update one InviteLinks
     * const inviteLinks = await prisma.inviteLinks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends inviteLinksUpdateArgs>(
      args: SelectSubset<T, inviteLinksUpdateArgs>
    ): Prisma__inviteLinksClient<inviteLinksGetPayload<T>>

    /**
     * Delete zero or more InviteLinks.
     * @param {inviteLinksDeleteManyArgs} args - Arguments to filter InviteLinks to delete.
     * @example
     * // Delete a few InviteLinks
     * const { count } = await prisma.inviteLinks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends inviteLinksDeleteManyArgs>(
      args?: SelectSubset<T, inviteLinksDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more InviteLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inviteLinksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InviteLinks
     * const inviteLinks = await prisma.inviteLinks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends inviteLinksUpdateManyArgs>(
      args: SelectSubset<T, inviteLinksUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one InviteLinks.
     * @param {inviteLinksUpsertArgs} args - Arguments to update or create a InviteLinks.
     * @example
     * // Update or create a InviteLinks
     * const inviteLinks = await prisma.inviteLinks.upsert({
     *   create: {
     *     // ... data to create a InviteLinks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InviteLinks we want to update
     *   }
     * })
    **/
    upsert<T extends inviteLinksUpsertArgs>(
      args: SelectSubset<T, inviteLinksUpsertArgs>
    ): Prisma__inviteLinksClient<inviteLinksGetPayload<T>>

    /**
     * Count the number of InviteLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inviteLinksCountArgs} args - Arguments to filter InviteLinks to count.
     * @example
     * // Count the number of InviteLinks
     * const count = await prisma.inviteLinks.count({
     *   where: {
     *     // ... the filter for the InviteLinks we want to count
     *   }
     * })
    **/
    count<T extends inviteLinksCountArgs>(
      args?: Subset<T, inviteLinksCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InviteLinksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InviteLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteLinksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InviteLinksAggregateArgs>(args: Subset<T, InviteLinksAggregateArgs>): PrismaPromise<GetInviteLinksAggregateType<T>>

    /**
     * Group by InviteLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteLinksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InviteLinksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InviteLinksGroupByArgs['orderBy'] }
        : { orderBy?: InviteLinksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InviteLinksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInviteLinksGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for inviteLinks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__inviteLinksClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * inviteLinks base type for findUnique actions
   */
  export type inviteLinksFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the inviteLinks
     */
    select?: inviteLinksSelect | null
    /**
     * Filter, which inviteLinks to fetch.
     */
    where: inviteLinksWhereUniqueInput
  }

  /**
   * inviteLinks findUnique
   */
  export interface inviteLinksFindUniqueArgs extends inviteLinksFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * inviteLinks findUniqueOrThrow
   */
  export type inviteLinksFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the inviteLinks
     */
    select?: inviteLinksSelect | null
    /**
     * Filter, which inviteLinks to fetch.
     */
    where: inviteLinksWhereUniqueInput
  }


  /**
   * inviteLinks base type for findFirst actions
   */
  export type inviteLinksFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the inviteLinks
     */
    select?: inviteLinksSelect | null
    /**
     * Filter, which inviteLinks to fetch.
     */
    where?: inviteLinksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inviteLinks to fetch.
     */
    orderBy?: Enumerable<inviteLinksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inviteLinks.
     */
    cursor?: inviteLinksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inviteLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inviteLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inviteLinks.
     */
    distinct?: Enumerable<InviteLinksScalarFieldEnum>
  }

  /**
   * inviteLinks findFirst
   */
  export interface inviteLinksFindFirstArgs extends inviteLinksFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * inviteLinks findFirstOrThrow
   */
  export type inviteLinksFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the inviteLinks
     */
    select?: inviteLinksSelect | null
    /**
     * Filter, which inviteLinks to fetch.
     */
    where?: inviteLinksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inviteLinks to fetch.
     */
    orderBy?: Enumerable<inviteLinksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inviteLinks.
     */
    cursor?: inviteLinksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inviteLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inviteLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inviteLinks.
     */
    distinct?: Enumerable<InviteLinksScalarFieldEnum>
  }


  /**
   * inviteLinks findMany
   */
  export type inviteLinksFindManyArgs = {
    /**
     * Select specific fields to fetch from the inviteLinks
     */
    select?: inviteLinksSelect | null
    /**
     * Filter, which inviteLinks to fetch.
     */
    where?: inviteLinksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inviteLinks to fetch.
     */
    orderBy?: Enumerable<inviteLinksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing inviteLinks.
     */
    cursor?: inviteLinksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inviteLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inviteLinks.
     */
    skip?: number
    distinct?: Enumerable<InviteLinksScalarFieldEnum>
  }


  /**
   * inviteLinks create
   */
  export type inviteLinksCreateArgs = {
    /**
     * Select specific fields to fetch from the inviteLinks
     */
    select?: inviteLinksSelect | null
    /**
     * The data needed to create a inviteLinks.
     */
    data: XOR<inviteLinksCreateInput, inviteLinksUncheckedCreateInput>
  }


  /**
   * inviteLinks update
   */
  export type inviteLinksUpdateArgs = {
    /**
     * Select specific fields to fetch from the inviteLinks
     */
    select?: inviteLinksSelect | null
    /**
     * The data needed to update a inviteLinks.
     */
    data: XOR<inviteLinksUpdateInput, inviteLinksUncheckedUpdateInput>
    /**
     * Choose, which inviteLinks to update.
     */
    where: inviteLinksWhereUniqueInput
  }


  /**
   * inviteLinks updateMany
   */
  export type inviteLinksUpdateManyArgs = {
    /**
     * The data used to update inviteLinks.
     */
    data: XOR<inviteLinksUpdateManyMutationInput, inviteLinksUncheckedUpdateManyInput>
    /**
     * Filter which inviteLinks to update
     */
    where?: inviteLinksWhereInput
  }


  /**
   * inviteLinks upsert
   */
  export type inviteLinksUpsertArgs = {
    /**
     * Select specific fields to fetch from the inviteLinks
     */
    select?: inviteLinksSelect | null
    /**
     * The filter to search for the inviteLinks to update in case it exists.
     */
    where: inviteLinksWhereUniqueInput
    /**
     * In case the inviteLinks found by the `where` argument doesn't exist, create a new inviteLinks with this data.
     */
    create: XOR<inviteLinksCreateInput, inviteLinksUncheckedCreateInput>
    /**
     * In case the inviteLinks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<inviteLinksUpdateInput, inviteLinksUncheckedUpdateInput>
  }


  /**
   * inviteLinks delete
   */
  export type inviteLinksDeleteArgs = {
    /**
     * Select specific fields to fetch from the inviteLinks
     */
    select?: inviteLinksSelect | null
    /**
     * Filter which inviteLinks to delete.
     */
    where: inviteLinksWhereUniqueInput
  }


  /**
   * inviteLinks deleteMany
   */
  export type inviteLinksDeleteManyArgs = {
    /**
     * Filter which inviteLinks to delete
     */
    where?: inviteLinksWhereInput
  }


  /**
   * inviteLinks without action
   */
  export type inviteLinksArgs = {
    /**
     * Select specific fields to fetch from the inviteLinks
     */
    select?: inviteLinksSelect | null
  }



  /**
   * Model Students
   */


  export type AggregateStudents = {
    _count: StudentsCountAggregateOutputType | null
    _avg: StudentsAvgAggregateOutputType | null
    _sum: StudentsSumAggregateOutputType | null
    _min: StudentsMinAggregateOutputType | null
    _max: StudentsMaxAggregateOutputType | null
  }

  export type StudentsAvgAggregateOutputType = {
    id: number | null
  }

  export type StudentsSumAggregateOutputType = {
    id: number | null
  }

  export type StudentsMinAggregateOutputType = {
    id: number | null
    userId: string | null
    admin: boolean | null
  }

  export type StudentsMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    admin: boolean | null
  }

  export type StudentsCountAggregateOutputType = {
    id: number
    userId: number
    admin: number
    _all: number
  }


  export type StudentsAvgAggregateInputType = {
    id?: true
  }

  export type StudentsSumAggregateInputType = {
    id?: true
  }

  export type StudentsMinAggregateInputType = {
    id?: true
    userId?: true
    admin?: true
  }

  export type StudentsMaxAggregateInputType = {
    id?: true
    userId?: true
    admin?: true
  }

  export type StudentsCountAggregateInputType = {
    id?: true
    userId?: true
    admin?: true
    _all?: true
  }

  export type StudentsAggregateArgs = {
    /**
     * Filter which Students to aggregate.
     */
    where?: StudentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: Enumerable<StudentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentsMaxAggregateInputType
  }

  export type GetStudentsAggregateType<T extends StudentsAggregateArgs> = {
        [P in keyof T & keyof AggregateStudents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudents[P]>
      : GetScalarType<T[P], AggregateStudents[P]>
  }




  export type StudentsGroupByArgs = {
    where?: StudentsWhereInput
    orderBy?: Enumerable<StudentsOrderByWithAggregationInput>
    by: StudentsScalarFieldEnum[]
    having?: StudentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentsCountAggregateInputType | true
    _avg?: StudentsAvgAggregateInputType
    _sum?: StudentsSumAggregateInputType
    _min?: StudentsMinAggregateInputType
    _max?: StudentsMaxAggregateInputType
  }


  export type StudentsGroupByOutputType = {
    id: number
    userId: string
    admin: boolean
    _count: StudentsCountAggregateOutputType | null
    _avg: StudentsAvgAggregateOutputType | null
    _sum: StudentsSumAggregateOutputType | null
    _min: StudentsMinAggregateOutputType | null
    _max: StudentsMaxAggregateOutputType | null
  }

  type GetStudentsGroupByPayload<T extends StudentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StudentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentsGroupByOutputType[P]>
            : GetScalarType<T[P], StudentsGroupByOutputType[P]>
        }
      >
    >


  export type StudentsSelect = {
    id?: boolean
    userId?: boolean
    admin?: boolean
  }


  export type StudentsGetPayload<S extends boolean | null | undefined | StudentsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Students :
    S extends undefined ? never :
    S extends { include: any } & (StudentsArgs | StudentsFindManyArgs)
    ? Students 
    : S extends { select: any } & (StudentsArgs | StudentsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Students ? Students[P] : never
  } 
      : Students


  type StudentsCountArgs = 
    Omit<StudentsFindManyArgs, 'select' | 'include'> & {
      select?: StudentsCountAggregateInputType | true
    }

  export interface StudentsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Students that matches the filter.
     * @param {StudentsFindUniqueArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StudentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Students'> extends True ? Prisma__StudentsClient<StudentsGetPayload<T>> : Prisma__StudentsClient<StudentsGetPayload<T> | null, null>

    /**
     * Find one Students that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StudentsFindUniqueOrThrowArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, StudentsFindUniqueOrThrowArgs>
    ): Prisma__StudentsClient<StudentsGetPayload<T>>

    /**
     * Find the first Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsFindFirstArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StudentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Students'> extends True ? Prisma__StudentsClient<StudentsGetPayload<T>> : Prisma__StudentsClient<StudentsGetPayload<T> | null, null>

    /**
     * Find the first Students that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsFindFirstOrThrowArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, StudentsFindFirstOrThrowArgs>
    ): Prisma__StudentsClient<StudentsGetPayload<T>>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.students.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.students.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentsWithIdOnly = await prisma.students.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StudentsFindManyArgs>(
      args?: SelectSubset<T, StudentsFindManyArgs>
    ): PrismaPromise<Array<StudentsGetPayload<T>>>

    /**
     * Create a Students.
     * @param {StudentsCreateArgs} args - Arguments to create a Students.
     * @example
     * // Create one Students
     * const Students = await prisma.students.create({
     *   data: {
     *     // ... data to create a Students
     *   }
     * })
     * 
    **/
    create<T extends StudentsCreateArgs>(
      args: SelectSubset<T, StudentsCreateArgs>
    ): Prisma__StudentsClient<StudentsGetPayload<T>>

    /**
     * Delete a Students.
     * @param {StudentsDeleteArgs} args - Arguments to delete one Students.
     * @example
     * // Delete one Students
     * const Students = await prisma.students.delete({
     *   where: {
     *     // ... filter to delete one Students
     *   }
     * })
     * 
    **/
    delete<T extends StudentsDeleteArgs>(
      args: SelectSubset<T, StudentsDeleteArgs>
    ): Prisma__StudentsClient<StudentsGetPayload<T>>

    /**
     * Update one Students.
     * @param {StudentsUpdateArgs} args - Arguments to update one Students.
     * @example
     * // Update one Students
     * const students = await prisma.students.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentsUpdateArgs>(
      args: SelectSubset<T, StudentsUpdateArgs>
    ): Prisma__StudentsClient<StudentsGetPayload<T>>

    /**
     * Delete zero or more Students.
     * @param {StudentsDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.students.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentsDeleteManyArgs>(
      args?: SelectSubset<T, StudentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const students = await prisma.students.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentsUpdateManyArgs>(
      args: SelectSubset<T, StudentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Students.
     * @param {StudentsUpsertArgs} args - Arguments to update or create a Students.
     * @example
     * // Update or create a Students
     * const students = await prisma.students.upsert({
     *   create: {
     *     // ... data to create a Students
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Students we want to update
     *   }
     * })
    **/
    upsert<T extends StudentsUpsertArgs>(
      args: SelectSubset<T, StudentsUpsertArgs>
    ): Prisma__StudentsClient<StudentsGetPayload<T>>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.students.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentsCountArgs>(
      args?: Subset<T, StudentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentsAggregateArgs>(args: Subset<T, StudentsAggregateArgs>): PrismaPromise<GetStudentsAggregateType<T>>

    /**
     * Group by Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentsGroupByArgs['orderBy'] }
        : { orderBy?: StudentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Students.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StudentsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Students base type for findUnique actions
   */
  export type StudentsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect | null
    /**
     * Filter, which Students to fetch.
     */
    where: StudentsWhereUniqueInput
  }

  /**
   * Students findUnique
   */
  export interface StudentsFindUniqueArgs extends StudentsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Students findUniqueOrThrow
   */
  export type StudentsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect | null
    /**
     * Filter, which Students to fetch.
     */
    where: StudentsWhereUniqueInput
  }


  /**
   * Students base type for findFirst actions
   */
  export type StudentsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: Enumerable<StudentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: Enumerable<StudentsScalarFieldEnum>
  }

  /**
   * Students findFirst
   */
  export interface StudentsFindFirstArgs extends StudentsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Students findFirstOrThrow
   */
  export type StudentsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: Enumerable<StudentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: Enumerable<StudentsScalarFieldEnum>
  }


  /**
   * Students findMany
   */
  export type StudentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: Enumerable<StudentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: Enumerable<StudentsScalarFieldEnum>
  }


  /**
   * Students create
   */
  export type StudentsCreateArgs = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect | null
    /**
     * The data needed to create a Students.
     */
    data: XOR<StudentsCreateInput, StudentsUncheckedCreateInput>
  }


  /**
   * Students update
   */
  export type StudentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect | null
    /**
     * The data needed to update a Students.
     */
    data: XOR<StudentsUpdateInput, StudentsUncheckedUpdateInput>
    /**
     * Choose, which Students to update.
     */
    where: StudentsWhereUniqueInput
  }


  /**
   * Students updateMany
   */
  export type StudentsUpdateManyArgs = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentsUpdateManyMutationInput, StudentsUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentsWhereInput
  }


  /**
   * Students upsert
   */
  export type StudentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect | null
    /**
     * The filter to search for the Students to update in case it exists.
     */
    where: StudentsWhereUniqueInput
    /**
     * In case the Students found by the `where` argument doesn't exist, create a new Students with this data.
     */
    create: XOR<StudentsCreateInput, StudentsUncheckedCreateInput>
    /**
     * In case the Students was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentsUpdateInput, StudentsUncheckedUpdateInput>
  }


  /**
   * Students delete
   */
  export type StudentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect | null
    /**
     * Filter which Students to delete.
     */
    where: StudentsWhereUniqueInput
  }


  /**
   * Students deleteMany
   */
  export type StudentsDeleteManyArgs = {
    /**
     * Filter which Students to delete
     */
    where?: StudentsWhereInput
  }


  /**
   * Students without action
   */
  export type StudentsArgs = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect | null
  }



  /**
   * Model Surveys
   */


  export type AggregateSurveys = {
    _count: SurveysCountAggregateOutputType | null
    _avg: SurveysAvgAggregateOutputType | null
    _sum: SurveysSumAggregateOutputType | null
    _min: SurveysMinAggregateOutputType | null
    _max: SurveysMaxAggregateOutputType | null
  }

  export type SurveysAvgAggregateOutputType = {
    id: number | null
  }

  export type SurveysSumAggregateOutputType = {
    id: number | null
  }

  export type SurveysMinAggregateOutputType = {
    id: number | null
    teacherId: string | null
  }

  export type SurveysMaxAggregateOutputType = {
    id: number | null
    teacherId: string | null
  }

  export type SurveysCountAggregateOutputType = {
    id: number
    teacherId: number
    _all: number
  }


  export type SurveysAvgAggregateInputType = {
    id?: true
  }

  export type SurveysSumAggregateInputType = {
    id?: true
  }

  export type SurveysMinAggregateInputType = {
    id?: true
    teacherId?: true
  }

  export type SurveysMaxAggregateInputType = {
    id?: true
    teacherId?: true
  }

  export type SurveysCountAggregateInputType = {
    id?: true
    teacherId?: true
    _all?: true
  }

  export type SurveysAggregateArgs = {
    /**
     * Filter which Surveys to aggregate.
     */
    where?: SurveysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surveys to fetch.
     */
    orderBy?: Enumerable<SurveysOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SurveysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surveys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Surveys
    **/
    _count?: true | SurveysCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SurveysAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SurveysSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SurveysMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SurveysMaxAggregateInputType
  }

  export type GetSurveysAggregateType<T extends SurveysAggregateArgs> = {
        [P in keyof T & keyof AggregateSurveys]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurveys[P]>
      : GetScalarType<T[P], AggregateSurveys[P]>
  }




  export type SurveysGroupByArgs = {
    where?: SurveysWhereInput
    orderBy?: Enumerable<SurveysOrderByWithAggregationInput>
    by: SurveysScalarFieldEnum[]
    having?: SurveysScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SurveysCountAggregateInputType | true
    _avg?: SurveysAvgAggregateInputType
    _sum?: SurveysSumAggregateInputType
    _min?: SurveysMinAggregateInputType
    _max?: SurveysMaxAggregateInputType
  }


  export type SurveysGroupByOutputType = {
    id: number
    teacherId: string
    _count: SurveysCountAggregateOutputType | null
    _avg: SurveysAvgAggregateOutputType | null
    _sum: SurveysSumAggregateOutputType | null
    _min: SurveysMinAggregateOutputType | null
    _max: SurveysMaxAggregateOutputType | null
  }

  type GetSurveysGroupByPayload<T extends SurveysGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SurveysGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SurveysGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SurveysGroupByOutputType[P]>
            : GetScalarType<T[P], SurveysGroupByOutputType[P]>
        }
      >
    >


  export type SurveysSelect = {
    id?: boolean
    teacherId?: boolean
  }


  export type SurveysGetPayload<S extends boolean | null | undefined | SurveysArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Surveys :
    S extends undefined ? never :
    S extends { include: any } & (SurveysArgs | SurveysFindManyArgs)
    ? Surveys 
    : S extends { select: any } & (SurveysArgs | SurveysFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Surveys ? Surveys[P] : never
  } 
      : Surveys


  type SurveysCountArgs = 
    Omit<SurveysFindManyArgs, 'select' | 'include'> & {
      select?: SurveysCountAggregateInputType | true
    }

  export interface SurveysDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Surveys that matches the filter.
     * @param {SurveysFindUniqueArgs} args - Arguments to find a Surveys
     * @example
     * // Get one Surveys
     * const surveys = await prisma.surveys.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SurveysFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SurveysFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Surveys'> extends True ? Prisma__SurveysClient<SurveysGetPayload<T>> : Prisma__SurveysClient<SurveysGetPayload<T> | null, null>

    /**
     * Find one Surveys that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SurveysFindUniqueOrThrowArgs} args - Arguments to find a Surveys
     * @example
     * // Get one Surveys
     * const surveys = await prisma.surveys.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SurveysFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SurveysFindUniqueOrThrowArgs>
    ): Prisma__SurveysClient<SurveysGetPayload<T>>

    /**
     * Find the first Surveys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveysFindFirstArgs} args - Arguments to find a Surveys
     * @example
     * // Get one Surveys
     * const surveys = await prisma.surveys.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SurveysFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SurveysFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Surveys'> extends True ? Prisma__SurveysClient<SurveysGetPayload<T>> : Prisma__SurveysClient<SurveysGetPayload<T> | null, null>

    /**
     * Find the first Surveys that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveysFindFirstOrThrowArgs} args - Arguments to find a Surveys
     * @example
     * // Get one Surveys
     * const surveys = await prisma.surveys.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SurveysFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SurveysFindFirstOrThrowArgs>
    ): Prisma__SurveysClient<SurveysGetPayload<T>>

    /**
     * Find zero or more Surveys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveysFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Surveys
     * const surveys = await prisma.surveys.findMany()
     * 
     * // Get first 10 Surveys
     * const surveys = await prisma.surveys.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const surveysWithIdOnly = await prisma.surveys.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SurveysFindManyArgs>(
      args?: SelectSubset<T, SurveysFindManyArgs>
    ): PrismaPromise<Array<SurveysGetPayload<T>>>

    /**
     * Create a Surveys.
     * @param {SurveysCreateArgs} args - Arguments to create a Surveys.
     * @example
     * // Create one Surveys
     * const Surveys = await prisma.surveys.create({
     *   data: {
     *     // ... data to create a Surveys
     *   }
     * })
     * 
    **/
    create<T extends SurveysCreateArgs>(
      args: SelectSubset<T, SurveysCreateArgs>
    ): Prisma__SurveysClient<SurveysGetPayload<T>>

    /**
     * Delete a Surveys.
     * @param {SurveysDeleteArgs} args - Arguments to delete one Surveys.
     * @example
     * // Delete one Surveys
     * const Surveys = await prisma.surveys.delete({
     *   where: {
     *     // ... filter to delete one Surveys
     *   }
     * })
     * 
    **/
    delete<T extends SurveysDeleteArgs>(
      args: SelectSubset<T, SurveysDeleteArgs>
    ): Prisma__SurveysClient<SurveysGetPayload<T>>

    /**
     * Update one Surveys.
     * @param {SurveysUpdateArgs} args - Arguments to update one Surveys.
     * @example
     * // Update one Surveys
     * const surveys = await prisma.surveys.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SurveysUpdateArgs>(
      args: SelectSubset<T, SurveysUpdateArgs>
    ): Prisma__SurveysClient<SurveysGetPayload<T>>

    /**
     * Delete zero or more Surveys.
     * @param {SurveysDeleteManyArgs} args - Arguments to filter Surveys to delete.
     * @example
     * // Delete a few Surveys
     * const { count } = await prisma.surveys.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SurveysDeleteManyArgs>(
      args?: SelectSubset<T, SurveysDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Surveys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveysUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Surveys
     * const surveys = await prisma.surveys.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SurveysUpdateManyArgs>(
      args: SelectSubset<T, SurveysUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Surveys.
     * @param {SurveysUpsertArgs} args - Arguments to update or create a Surveys.
     * @example
     * // Update or create a Surveys
     * const surveys = await prisma.surveys.upsert({
     *   create: {
     *     // ... data to create a Surveys
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Surveys we want to update
     *   }
     * })
    **/
    upsert<T extends SurveysUpsertArgs>(
      args: SelectSubset<T, SurveysUpsertArgs>
    ): Prisma__SurveysClient<SurveysGetPayload<T>>

    /**
     * Count the number of Surveys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveysCountArgs} args - Arguments to filter Surveys to count.
     * @example
     * // Count the number of Surveys
     * const count = await prisma.surveys.count({
     *   where: {
     *     // ... the filter for the Surveys we want to count
     *   }
     * })
    **/
    count<T extends SurveysCountArgs>(
      args?: Subset<T, SurveysCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SurveysCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Surveys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveysAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SurveysAggregateArgs>(args: Subset<T, SurveysAggregateArgs>): PrismaPromise<GetSurveysAggregateType<T>>

    /**
     * Group by Surveys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveysGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SurveysGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SurveysGroupByArgs['orderBy'] }
        : { orderBy?: SurveysGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SurveysGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSurveysGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Surveys.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SurveysClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Surveys base type for findUnique actions
   */
  export type SurveysFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Surveys
     */
    select?: SurveysSelect | null
    /**
     * Filter, which Surveys to fetch.
     */
    where: SurveysWhereUniqueInput
  }

  /**
   * Surveys findUnique
   */
  export interface SurveysFindUniqueArgs extends SurveysFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Surveys findUniqueOrThrow
   */
  export type SurveysFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Surveys
     */
    select?: SurveysSelect | null
    /**
     * Filter, which Surveys to fetch.
     */
    where: SurveysWhereUniqueInput
  }


  /**
   * Surveys base type for findFirst actions
   */
  export type SurveysFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Surveys
     */
    select?: SurveysSelect | null
    /**
     * Filter, which Surveys to fetch.
     */
    where?: SurveysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surveys to fetch.
     */
    orderBy?: Enumerable<SurveysOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Surveys.
     */
    cursor?: SurveysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surveys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Surveys.
     */
    distinct?: Enumerable<SurveysScalarFieldEnum>
  }

  /**
   * Surveys findFirst
   */
  export interface SurveysFindFirstArgs extends SurveysFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Surveys findFirstOrThrow
   */
  export type SurveysFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Surveys
     */
    select?: SurveysSelect | null
    /**
     * Filter, which Surveys to fetch.
     */
    where?: SurveysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surveys to fetch.
     */
    orderBy?: Enumerable<SurveysOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Surveys.
     */
    cursor?: SurveysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surveys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Surveys.
     */
    distinct?: Enumerable<SurveysScalarFieldEnum>
  }


  /**
   * Surveys findMany
   */
  export type SurveysFindManyArgs = {
    /**
     * Select specific fields to fetch from the Surveys
     */
    select?: SurveysSelect | null
    /**
     * Filter, which Surveys to fetch.
     */
    where?: SurveysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surveys to fetch.
     */
    orderBy?: Enumerable<SurveysOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Surveys.
     */
    cursor?: SurveysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surveys.
     */
    skip?: number
    distinct?: Enumerable<SurveysScalarFieldEnum>
  }


  /**
   * Surveys create
   */
  export type SurveysCreateArgs = {
    /**
     * Select specific fields to fetch from the Surveys
     */
    select?: SurveysSelect | null
    /**
     * The data needed to create a Surveys.
     */
    data: XOR<SurveysCreateInput, SurveysUncheckedCreateInput>
  }


  /**
   * Surveys update
   */
  export type SurveysUpdateArgs = {
    /**
     * Select specific fields to fetch from the Surveys
     */
    select?: SurveysSelect | null
    /**
     * The data needed to update a Surveys.
     */
    data: XOR<SurveysUpdateInput, SurveysUncheckedUpdateInput>
    /**
     * Choose, which Surveys to update.
     */
    where: SurveysWhereUniqueInput
  }


  /**
   * Surveys updateMany
   */
  export type SurveysUpdateManyArgs = {
    /**
     * The data used to update Surveys.
     */
    data: XOR<SurveysUpdateManyMutationInput, SurveysUncheckedUpdateManyInput>
    /**
     * Filter which Surveys to update
     */
    where?: SurveysWhereInput
  }


  /**
   * Surveys upsert
   */
  export type SurveysUpsertArgs = {
    /**
     * Select specific fields to fetch from the Surveys
     */
    select?: SurveysSelect | null
    /**
     * The filter to search for the Surveys to update in case it exists.
     */
    where: SurveysWhereUniqueInput
    /**
     * In case the Surveys found by the `where` argument doesn't exist, create a new Surveys with this data.
     */
    create: XOR<SurveysCreateInput, SurveysUncheckedCreateInput>
    /**
     * In case the Surveys was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SurveysUpdateInput, SurveysUncheckedUpdateInput>
  }


  /**
   * Surveys delete
   */
  export type SurveysDeleteArgs = {
    /**
     * Select specific fields to fetch from the Surveys
     */
    select?: SurveysSelect | null
    /**
     * Filter which Surveys to delete.
     */
    where: SurveysWhereUniqueInput
  }


  /**
   * Surveys deleteMany
   */
  export type SurveysDeleteManyArgs = {
    /**
     * Filter which Surveys to delete
     */
    where?: SurveysWhereInput
  }


  /**
   * Surveys without action
   */
  export type SurveysArgs = {
    /**
     * Select specific fields to fetch from the Surveys
     */
    select?: SurveysSelect | null
  }



  /**
   * Model Questions
   */


  export type AggregateQuestions = {
    _count: QuestionsCountAggregateOutputType | null
    _avg: QuestionsAvgAggregateOutputType | null
    _sum: QuestionsSumAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  export type QuestionsAvgAggregateOutputType = {
    id: number | null
  }

  export type QuestionsSumAggregateOutputType = {
    id: number | null
  }

  export type QuestionsMinAggregateOutputType = {
    id: number | null
    value: string | null
    type: string | null
    surveyId: string | null
  }

  export type QuestionsMaxAggregateOutputType = {
    id: number | null
    value: string | null
    type: string | null
    surveyId: string | null
  }

  export type QuestionsCountAggregateOutputType = {
    id: number
    value: number
    type: number
    surveyId: number
    _all: number
  }


  export type QuestionsAvgAggregateInputType = {
    id?: true
  }

  export type QuestionsSumAggregateInputType = {
    id?: true
  }

  export type QuestionsMinAggregateInputType = {
    id?: true
    value?: true
    type?: true
    surveyId?: true
  }

  export type QuestionsMaxAggregateInputType = {
    id?: true
    value?: true
    type?: true
    surveyId?: true
  }

  export type QuestionsCountAggregateInputType = {
    id?: true
    value?: true
    type?: true
    surveyId?: true
    _all?: true
  }

  export type QuestionsAggregateArgs = {
    /**
     * Filter which Questions to aggregate.
     */
    where?: QuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionsMaxAggregateInputType
  }

  export type GetQuestionsAggregateType<T extends QuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestions[P]>
      : GetScalarType<T[P], AggregateQuestions[P]>
  }




  export type QuestionsGroupByArgs = {
    where?: QuestionsWhereInput
    orderBy?: Enumerable<QuestionsOrderByWithAggregationInput>
    by: QuestionsScalarFieldEnum[]
    having?: QuestionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionsCountAggregateInputType | true
    _avg?: QuestionsAvgAggregateInputType
    _sum?: QuestionsSumAggregateInputType
    _min?: QuestionsMinAggregateInputType
    _max?: QuestionsMaxAggregateInputType
  }


  export type QuestionsGroupByOutputType = {
    id: number
    value: string
    type: string
    surveyId: string
    _count: QuestionsCountAggregateOutputType | null
    _avg: QuestionsAvgAggregateOutputType | null
    _sum: QuestionsSumAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  type GetQuestionsGroupByPayload<T extends QuestionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<QuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
        }
      >
    >


  export type QuestionsSelect = {
    id?: boolean
    value?: boolean
    type?: boolean
    surveyId?: boolean
  }


  export type QuestionsGetPayload<S extends boolean | null | undefined | QuestionsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Questions :
    S extends undefined ? never :
    S extends { include: any } & (QuestionsArgs | QuestionsFindManyArgs)
    ? Questions 
    : S extends { select: any } & (QuestionsArgs | QuestionsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Questions ? Questions[P] : never
  } 
      : Questions


  type QuestionsCountArgs = 
    Omit<QuestionsFindManyArgs, 'select' | 'include'> & {
      select?: QuestionsCountAggregateInputType | true
    }

  export interface QuestionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Questions that matches the filter.
     * @param {QuestionsFindUniqueArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QuestionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, QuestionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Questions'> extends True ? Prisma__QuestionsClient<QuestionsGetPayload<T>> : Prisma__QuestionsClient<QuestionsGetPayload<T> | null, null>

    /**
     * Find one Questions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {QuestionsFindUniqueOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends QuestionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, QuestionsFindUniqueOrThrowArgs>
    ): Prisma__QuestionsClient<QuestionsGetPayload<T>>

    /**
     * Find the first Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsFindFirstArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QuestionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, QuestionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Questions'> extends True ? Prisma__QuestionsClient<QuestionsGetPayload<T>> : Prisma__QuestionsClient<QuestionsGetPayload<T> | null, null>

    /**
     * Find the first Questions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsFindFirstOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends QuestionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, QuestionsFindFirstOrThrowArgs>
    ): Prisma__QuestionsClient<QuestionsGetPayload<T>>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.questions.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.questions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionsWithIdOnly = await prisma.questions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends QuestionsFindManyArgs>(
      args?: SelectSubset<T, QuestionsFindManyArgs>
    ): PrismaPromise<Array<QuestionsGetPayload<T>>>

    /**
     * Create a Questions.
     * @param {QuestionsCreateArgs} args - Arguments to create a Questions.
     * @example
     * // Create one Questions
     * const Questions = await prisma.questions.create({
     *   data: {
     *     // ... data to create a Questions
     *   }
     * })
     * 
    **/
    create<T extends QuestionsCreateArgs>(
      args: SelectSubset<T, QuestionsCreateArgs>
    ): Prisma__QuestionsClient<QuestionsGetPayload<T>>

    /**
     * Delete a Questions.
     * @param {QuestionsDeleteArgs} args - Arguments to delete one Questions.
     * @example
     * // Delete one Questions
     * const Questions = await prisma.questions.delete({
     *   where: {
     *     // ... filter to delete one Questions
     *   }
     * })
     * 
    **/
    delete<T extends QuestionsDeleteArgs>(
      args: SelectSubset<T, QuestionsDeleteArgs>
    ): Prisma__QuestionsClient<QuestionsGetPayload<T>>

    /**
     * Update one Questions.
     * @param {QuestionsUpdateArgs} args - Arguments to update one Questions.
     * @example
     * // Update one Questions
     * const questions = await prisma.questions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QuestionsUpdateArgs>(
      args: SelectSubset<T, QuestionsUpdateArgs>
    ): Prisma__QuestionsClient<QuestionsGetPayload<T>>

    /**
     * Delete zero or more Questions.
     * @param {QuestionsDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.questions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QuestionsDeleteManyArgs>(
      args?: SelectSubset<T, QuestionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const questions = await prisma.questions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QuestionsUpdateManyArgs>(
      args: SelectSubset<T, QuestionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Questions.
     * @param {QuestionsUpsertArgs} args - Arguments to update or create a Questions.
     * @example
     * // Update or create a Questions
     * const questions = await prisma.questions.upsert({
     *   create: {
     *     // ... data to create a Questions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questions we want to update
     *   }
     * })
    **/
    upsert<T extends QuestionsUpsertArgs>(
      args: SelectSubset<T, QuestionsUpsertArgs>
    ): Prisma__QuestionsClient<QuestionsGetPayload<T>>

    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.questions.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionsCountArgs>(
      args?: Subset<T, QuestionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionsAggregateArgs>(args: Subset<T, QuestionsAggregateArgs>): PrismaPromise<GetQuestionsAggregateType<T>>

    /**
     * Group by Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionsGroupByArgs['orderBy'] }
        : { orderBy?: QuestionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Questions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__QuestionsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Questions base type for findUnique actions
   */
  export type QuestionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect | null
    /**
     * Filter, which Questions to fetch.
     */
    where: QuestionsWhereUniqueInput
  }

  /**
   * Questions findUnique
   */
  export interface QuestionsFindUniqueArgs extends QuestionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Questions findUniqueOrThrow
   */
  export type QuestionsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect | null
    /**
     * Filter, which Questions to fetch.
     */
    where: QuestionsWhereUniqueInput
  }


  /**
   * Questions base type for findFirst actions
   */
  export type QuestionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: Enumerable<QuestionsScalarFieldEnum>
  }

  /**
   * Questions findFirst
   */
  export interface QuestionsFindFirstArgs extends QuestionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Questions findFirstOrThrow
   */
  export type QuestionsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: Enumerable<QuestionsScalarFieldEnum>
  }


  /**
   * Questions findMany
   */
  export type QuestionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: Enumerable<QuestionsScalarFieldEnum>
  }


  /**
   * Questions create
   */
  export type QuestionsCreateArgs = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect | null
    /**
     * The data needed to create a Questions.
     */
    data: XOR<QuestionsCreateInput, QuestionsUncheckedCreateInput>
  }


  /**
   * Questions update
   */
  export type QuestionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect | null
    /**
     * The data needed to update a Questions.
     */
    data: XOR<QuestionsUpdateInput, QuestionsUncheckedUpdateInput>
    /**
     * Choose, which Questions to update.
     */
    where: QuestionsWhereUniqueInput
  }


  /**
   * Questions updateMany
   */
  export type QuestionsUpdateManyArgs = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionsUpdateManyMutationInput, QuestionsUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionsWhereInput
  }


  /**
   * Questions upsert
   */
  export type QuestionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect | null
    /**
     * The filter to search for the Questions to update in case it exists.
     */
    where: QuestionsWhereUniqueInput
    /**
     * In case the Questions found by the `where` argument doesn't exist, create a new Questions with this data.
     */
    create: XOR<QuestionsCreateInput, QuestionsUncheckedCreateInput>
    /**
     * In case the Questions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionsUpdateInput, QuestionsUncheckedUpdateInput>
  }


  /**
   * Questions delete
   */
  export type QuestionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect | null
    /**
     * Filter which Questions to delete.
     */
    where: QuestionsWhereUniqueInput
  }


  /**
   * Questions deleteMany
   */
  export type QuestionsDeleteManyArgs = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionsWhereInput
  }


  /**
   * Questions without action
   */
  export type QuestionsArgs = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect | null
  }



  /**
   * Model SessionId
   */


  export type AggregateSessionId = {
    _count: SessionIdCountAggregateOutputType | null
    _min: SessionIdMinAggregateOutputType | null
    _max: SessionIdMaxAggregateOutputType | null
  }

  export type SessionIdMinAggregateOutputType = {
    sessionId: string | null
    expiration: string | null
    userId: string | null
  }

  export type SessionIdMaxAggregateOutputType = {
    sessionId: string | null
    expiration: string | null
    userId: string | null
  }

  export type SessionIdCountAggregateOutputType = {
    sessionId: number
    expiration: number
    userId: number
    _all: number
  }


  export type SessionIdMinAggregateInputType = {
    sessionId?: true
    expiration?: true
    userId?: true
  }

  export type SessionIdMaxAggregateInputType = {
    sessionId?: true
    expiration?: true
    userId?: true
  }

  export type SessionIdCountAggregateInputType = {
    sessionId?: true
    expiration?: true
    userId?: true
    _all?: true
  }

  export type SessionIdAggregateArgs = {
    /**
     * Filter which SessionId to aggregate.
     */
    where?: SessionIdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionIds to fetch.
     */
    orderBy?: Enumerable<SessionIdOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionIdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionIds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionIds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionIds
    **/
    _count?: true | SessionIdCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionIdMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionIdMaxAggregateInputType
  }

  export type GetSessionIdAggregateType<T extends SessionIdAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionId]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionId[P]>
      : GetScalarType<T[P], AggregateSessionId[P]>
  }




  export type SessionIdGroupByArgs = {
    where?: SessionIdWhereInput
    orderBy?: Enumerable<SessionIdOrderByWithAggregationInput>
    by: SessionIdScalarFieldEnum[]
    having?: SessionIdScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionIdCountAggregateInputType | true
    _min?: SessionIdMinAggregateInputType
    _max?: SessionIdMaxAggregateInputType
  }


  export type SessionIdGroupByOutputType = {
    sessionId: string
    expiration: string
    userId: string
    _count: SessionIdCountAggregateOutputType | null
    _min: SessionIdMinAggregateOutputType | null
    _max: SessionIdMaxAggregateOutputType | null
  }

  type GetSessionIdGroupByPayload<T extends SessionIdGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionIdGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionIdGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionIdGroupByOutputType[P]>
            : GetScalarType<T[P], SessionIdGroupByOutputType[P]>
        }
      >
    >


  export type SessionIdSelect = {
    sessionId?: boolean
    expiration?: boolean
    userId?: boolean
    User?: boolean | UserArgs
  }


  export type SessionIdInclude = {
    User?: boolean | UserArgs
  }

  export type SessionIdGetPayload<S extends boolean | null | undefined | SessionIdArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SessionId :
    S extends undefined ? never :
    S extends { include: any } & (SessionIdArgs | SessionIdFindManyArgs)
    ? SessionId  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SessionIdArgs | SessionIdFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :  P extends keyof SessionId ? SessionId[P] : never
  } 
      : SessionId


  type SessionIdCountArgs = 
    Omit<SessionIdFindManyArgs, 'select' | 'include'> & {
      select?: SessionIdCountAggregateInputType | true
    }

  export interface SessionIdDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one SessionId that matches the filter.
     * @param {SessionIdFindUniqueArgs} args - Arguments to find a SessionId
     * @example
     * // Get one SessionId
     * const sessionId = await prisma.sessionId.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionIdFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionIdFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SessionId'> extends True ? Prisma__SessionIdClient<SessionIdGetPayload<T>> : Prisma__SessionIdClient<SessionIdGetPayload<T> | null, null>

    /**
     * Find one SessionId that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionIdFindUniqueOrThrowArgs} args - Arguments to find a SessionId
     * @example
     * // Get one SessionId
     * const sessionId = await prisma.sessionId.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionIdFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SessionIdFindUniqueOrThrowArgs>
    ): Prisma__SessionIdClient<SessionIdGetPayload<T>>

    /**
     * Find the first SessionId that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionIdFindFirstArgs} args - Arguments to find a SessionId
     * @example
     * // Get one SessionId
     * const sessionId = await prisma.sessionId.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionIdFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionIdFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SessionId'> extends True ? Prisma__SessionIdClient<SessionIdGetPayload<T>> : Prisma__SessionIdClient<SessionIdGetPayload<T> | null, null>

    /**
     * Find the first SessionId that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionIdFindFirstOrThrowArgs} args - Arguments to find a SessionId
     * @example
     * // Get one SessionId
     * const sessionId = await prisma.sessionId.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionIdFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SessionIdFindFirstOrThrowArgs>
    ): Prisma__SessionIdClient<SessionIdGetPayload<T>>

    /**
     * Find zero or more SessionIds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionIdFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionIds
     * const sessionIds = await prisma.sessionId.findMany()
     * 
     * // Get first 10 SessionIds
     * const sessionIds = await prisma.sessionId.findMany({ take: 10 })
     * 
     * // Only select the `sessionId`
     * const sessionIdWithSessionIdOnly = await prisma.sessionId.findMany({ select: { sessionId: true } })
     * 
    **/
    findMany<T extends SessionIdFindManyArgs>(
      args?: SelectSubset<T, SessionIdFindManyArgs>
    ): PrismaPromise<Array<SessionIdGetPayload<T>>>

    /**
     * Create a SessionId.
     * @param {SessionIdCreateArgs} args - Arguments to create a SessionId.
     * @example
     * // Create one SessionId
     * const SessionId = await prisma.sessionId.create({
     *   data: {
     *     // ... data to create a SessionId
     *   }
     * })
     * 
    **/
    create<T extends SessionIdCreateArgs>(
      args: SelectSubset<T, SessionIdCreateArgs>
    ): Prisma__SessionIdClient<SessionIdGetPayload<T>>

    /**
     * Delete a SessionId.
     * @param {SessionIdDeleteArgs} args - Arguments to delete one SessionId.
     * @example
     * // Delete one SessionId
     * const SessionId = await prisma.sessionId.delete({
     *   where: {
     *     // ... filter to delete one SessionId
     *   }
     * })
     * 
    **/
    delete<T extends SessionIdDeleteArgs>(
      args: SelectSubset<T, SessionIdDeleteArgs>
    ): Prisma__SessionIdClient<SessionIdGetPayload<T>>

    /**
     * Update one SessionId.
     * @param {SessionIdUpdateArgs} args - Arguments to update one SessionId.
     * @example
     * // Update one SessionId
     * const sessionId = await prisma.sessionId.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionIdUpdateArgs>(
      args: SelectSubset<T, SessionIdUpdateArgs>
    ): Prisma__SessionIdClient<SessionIdGetPayload<T>>

    /**
     * Delete zero or more SessionIds.
     * @param {SessionIdDeleteManyArgs} args - Arguments to filter SessionIds to delete.
     * @example
     * // Delete a few SessionIds
     * const { count } = await prisma.sessionId.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionIdDeleteManyArgs>(
      args?: SelectSubset<T, SessionIdDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionIds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionIdUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionIds
     * const sessionId = await prisma.sessionId.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionIdUpdateManyArgs>(
      args: SelectSubset<T, SessionIdUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SessionId.
     * @param {SessionIdUpsertArgs} args - Arguments to update or create a SessionId.
     * @example
     * // Update or create a SessionId
     * const sessionId = await prisma.sessionId.upsert({
     *   create: {
     *     // ... data to create a SessionId
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionId we want to update
     *   }
     * })
    **/
    upsert<T extends SessionIdUpsertArgs>(
      args: SelectSubset<T, SessionIdUpsertArgs>
    ): Prisma__SessionIdClient<SessionIdGetPayload<T>>

    /**
     * Count the number of SessionIds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionIdCountArgs} args - Arguments to filter SessionIds to count.
     * @example
     * // Count the number of SessionIds
     * const count = await prisma.sessionId.count({
     *   where: {
     *     // ... the filter for the SessionIds we want to count
     *   }
     * })
    **/
    count<T extends SessionIdCountArgs>(
      args?: Subset<T, SessionIdCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionIdCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionId.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionIdAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionIdAggregateArgs>(args: Subset<T, SessionIdAggregateArgs>): PrismaPromise<GetSessionIdAggregateType<T>>

    /**
     * Group by SessionId.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionIdGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionIdGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionIdGroupByArgs['orderBy'] }
        : { orderBy?: SessionIdGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionIdGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionIdGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionId.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionIdClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SessionId base type for findUnique actions
   */
  export type SessionIdFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SessionId
     */
    select?: SessionIdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionIdInclude | null
    /**
     * Filter, which SessionId to fetch.
     */
    where: SessionIdWhereUniqueInput
  }

  /**
   * SessionId findUnique
   */
  export interface SessionIdFindUniqueArgs extends SessionIdFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SessionId findUniqueOrThrow
   */
  export type SessionIdFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SessionId
     */
    select?: SessionIdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionIdInclude | null
    /**
     * Filter, which SessionId to fetch.
     */
    where: SessionIdWhereUniqueInput
  }


  /**
   * SessionId base type for findFirst actions
   */
  export type SessionIdFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SessionId
     */
    select?: SessionIdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionIdInclude | null
    /**
     * Filter, which SessionId to fetch.
     */
    where?: SessionIdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionIds to fetch.
     */
    orderBy?: Enumerable<SessionIdOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionIds.
     */
    cursor?: SessionIdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionIds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionIds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionIds.
     */
    distinct?: Enumerable<SessionIdScalarFieldEnum>
  }

  /**
   * SessionId findFirst
   */
  export interface SessionIdFindFirstArgs extends SessionIdFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SessionId findFirstOrThrow
   */
  export type SessionIdFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SessionId
     */
    select?: SessionIdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionIdInclude | null
    /**
     * Filter, which SessionId to fetch.
     */
    where?: SessionIdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionIds to fetch.
     */
    orderBy?: Enumerable<SessionIdOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionIds.
     */
    cursor?: SessionIdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionIds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionIds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionIds.
     */
    distinct?: Enumerable<SessionIdScalarFieldEnum>
  }


  /**
   * SessionId findMany
   */
  export type SessionIdFindManyArgs = {
    /**
     * Select specific fields to fetch from the SessionId
     */
    select?: SessionIdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionIdInclude | null
    /**
     * Filter, which SessionIds to fetch.
     */
    where?: SessionIdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionIds to fetch.
     */
    orderBy?: Enumerable<SessionIdOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionIds.
     */
    cursor?: SessionIdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionIds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionIds.
     */
    skip?: number
    distinct?: Enumerable<SessionIdScalarFieldEnum>
  }


  /**
   * SessionId create
   */
  export type SessionIdCreateArgs = {
    /**
     * Select specific fields to fetch from the SessionId
     */
    select?: SessionIdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionIdInclude | null
    /**
     * The data needed to create a SessionId.
     */
    data: XOR<SessionIdCreateInput, SessionIdUncheckedCreateInput>
  }


  /**
   * SessionId update
   */
  export type SessionIdUpdateArgs = {
    /**
     * Select specific fields to fetch from the SessionId
     */
    select?: SessionIdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionIdInclude | null
    /**
     * The data needed to update a SessionId.
     */
    data: XOR<SessionIdUpdateInput, SessionIdUncheckedUpdateInput>
    /**
     * Choose, which SessionId to update.
     */
    where: SessionIdWhereUniqueInput
  }


  /**
   * SessionId updateMany
   */
  export type SessionIdUpdateManyArgs = {
    /**
     * The data used to update SessionIds.
     */
    data: XOR<SessionIdUpdateManyMutationInput, SessionIdUncheckedUpdateManyInput>
    /**
     * Filter which SessionIds to update
     */
    where?: SessionIdWhereInput
  }


  /**
   * SessionId upsert
   */
  export type SessionIdUpsertArgs = {
    /**
     * Select specific fields to fetch from the SessionId
     */
    select?: SessionIdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionIdInclude | null
    /**
     * The filter to search for the SessionId to update in case it exists.
     */
    where: SessionIdWhereUniqueInput
    /**
     * In case the SessionId found by the `where` argument doesn't exist, create a new SessionId with this data.
     */
    create: XOR<SessionIdCreateInput, SessionIdUncheckedCreateInput>
    /**
     * In case the SessionId was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionIdUpdateInput, SessionIdUncheckedUpdateInput>
  }


  /**
   * SessionId delete
   */
  export type SessionIdDeleteArgs = {
    /**
     * Select specific fields to fetch from the SessionId
     */
    select?: SessionIdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionIdInclude | null
    /**
     * Filter which SessionId to delete.
     */
    where: SessionIdWhereUniqueInput
  }


  /**
   * SessionId deleteMany
   */
  export type SessionIdDeleteManyArgs = {
    /**
     * Filter which SessionIds to delete
     */
    where?: SessionIdWhereInput
  }


  /**
   * SessionId without action
   */
  export type SessionIdArgs = {
    /**
     * Select specific fields to fetch from the SessionId
     */
    select?: SessionIdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionIdInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const InviteLinksScalarFieldEnum: {
    id: 'id',
    teacherId: 'teacherId',
    classId: 'classId',
    maxUses: 'maxUses'
  };

  export type InviteLinksScalarFieldEnum = (typeof InviteLinksScalarFieldEnum)[keyof typeof InviteLinksScalarFieldEnum]


  export const QuestionsScalarFieldEnum: {
    id: 'id',
    value: 'value',
    type: 'type',
    surveyId: 'surveyId'
  };

  export type QuestionsScalarFieldEnum = (typeof QuestionsScalarFieldEnum)[keyof typeof QuestionsScalarFieldEnum]


  export const SessionIdScalarFieldEnum: {
    sessionId: 'sessionId',
    expiration: 'expiration',
    userId: 'userId'
  };

  export type SessionIdScalarFieldEnum = (typeof SessionIdScalarFieldEnum)[keyof typeof SessionIdScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StudentsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    admin: 'admin'
  };

  export type StudentsScalarFieldEnum = (typeof StudentsScalarFieldEnum)[keyof typeof StudentsScalarFieldEnum]


  export const SurveysScalarFieldEnum: {
    id: 'id',
    teacherId: 'teacherId'
  };

  export type SurveysScalarFieldEnum = (typeof SurveysScalarFieldEnum)[keyof typeof SurveysScalarFieldEnum]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    username: 'username',
    teacher: 'teacher'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    username?: StringFilter | string
    teacher?: BoolFilter | boolean
    sessions?: SessionIdListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    teacher?: SortOrder
    sessions?: SessionIdOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    teacher?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    teacher?: BoolWithAggregatesFilter | boolean
  }

  export type inviteLinksWhereInput = {
    AND?: Enumerable<inviteLinksWhereInput>
    OR?: Enumerable<inviteLinksWhereInput>
    NOT?: Enumerable<inviteLinksWhereInput>
    id?: StringFilter | string
    teacherId?: StringFilter | string
    classId?: StringFilter | string
    maxUses?: IntFilter | number
  }

  export type inviteLinksOrderByWithRelationInput = {
    id?: SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    maxUses?: SortOrder
  }

  export type inviteLinksWhereUniqueInput = {
    id?: string
  }

  export type inviteLinksOrderByWithAggregationInput = {
    id?: SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    maxUses?: SortOrder
    _count?: inviteLinksCountOrderByAggregateInput
    _avg?: inviteLinksAvgOrderByAggregateInput
    _max?: inviteLinksMaxOrderByAggregateInput
    _min?: inviteLinksMinOrderByAggregateInput
    _sum?: inviteLinksSumOrderByAggregateInput
  }

  export type inviteLinksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<inviteLinksScalarWhereWithAggregatesInput>
    OR?: Enumerable<inviteLinksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<inviteLinksScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    teacherId?: StringWithAggregatesFilter | string
    classId?: StringWithAggregatesFilter | string
    maxUses?: IntWithAggregatesFilter | number
  }

  export type StudentsWhereInput = {
    AND?: Enumerable<StudentsWhereInput>
    OR?: Enumerable<StudentsWhereInput>
    NOT?: Enumerable<StudentsWhereInput>
    id?: IntFilter | number
    userId?: StringFilter | string
    admin?: BoolFilter | boolean
  }

  export type StudentsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    admin?: SortOrder
  }

  export type StudentsWhereUniqueInput = {
    id?: number
  }

  export type StudentsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    admin?: SortOrder
    _count?: StudentsCountOrderByAggregateInput
    _avg?: StudentsAvgOrderByAggregateInput
    _max?: StudentsMaxOrderByAggregateInput
    _min?: StudentsMinOrderByAggregateInput
    _sum?: StudentsSumOrderByAggregateInput
  }

  export type StudentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StudentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<StudentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StudentsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
    admin?: BoolWithAggregatesFilter | boolean
  }

  export type SurveysWhereInput = {
    AND?: Enumerable<SurveysWhereInput>
    OR?: Enumerable<SurveysWhereInput>
    NOT?: Enumerable<SurveysWhereInput>
    id?: IntFilter | number
    teacherId?: StringFilter | string
  }

  export type SurveysOrderByWithRelationInput = {
    id?: SortOrder
    teacherId?: SortOrder
  }

  export type SurveysWhereUniqueInput = {
    id?: number
  }

  export type SurveysOrderByWithAggregationInput = {
    id?: SortOrder
    teacherId?: SortOrder
    _count?: SurveysCountOrderByAggregateInput
    _avg?: SurveysAvgOrderByAggregateInput
    _max?: SurveysMaxOrderByAggregateInput
    _min?: SurveysMinOrderByAggregateInput
    _sum?: SurveysSumOrderByAggregateInput
  }

  export type SurveysScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SurveysScalarWhereWithAggregatesInput>
    OR?: Enumerable<SurveysScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SurveysScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    teacherId?: StringWithAggregatesFilter | string
  }

  export type QuestionsWhereInput = {
    AND?: Enumerable<QuestionsWhereInput>
    OR?: Enumerable<QuestionsWhereInput>
    NOT?: Enumerable<QuestionsWhereInput>
    id?: IntFilter | number
    value?: StringFilter | string
    type?: StringFilter | string
    surveyId?: StringFilter | string
  }

  export type QuestionsOrderByWithRelationInput = {
    id?: SortOrder
    value?: SortOrder
    type?: SortOrder
    surveyId?: SortOrder
  }

  export type QuestionsWhereUniqueInput = {
    id?: number
  }

  export type QuestionsOrderByWithAggregationInput = {
    id?: SortOrder
    value?: SortOrder
    type?: SortOrder
    surveyId?: SortOrder
    _count?: QuestionsCountOrderByAggregateInput
    _avg?: QuestionsAvgOrderByAggregateInput
    _max?: QuestionsMaxOrderByAggregateInput
    _min?: QuestionsMinOrderByAggregateInput
    _sum?: QuestionsSumOrderByAggregateInput
  }

  export type QuestionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<QuestionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<QuestionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<QuestionsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    value?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    surveyId?: StringWithAggregatesFilter | string
  }

  export type SessionIdWhereInput = {
    AND?: Enumerable<SessionIdWhereInput>
    OR?: Enumerable<SessionIdWhereInput>
    NOT?: Enumerable<SessionIdWhereInput>
    sessionId?: StringFilter | string
    expiration?: StringFilter | string
    userId?: StringFilter | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionIdOrderByWithRelationInput = {
    sessionId?: SortOrder
    expiration?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type SessionIdWhereUniqueInput = {
    sessionId?: string
  }

  export type SessionIdOrderByWithAggregationInput = {
    sessionId?: SortOrder
    expiration?: SortOrder
    userId?: SortOrder
    _count?: SessionIdCountOrderByAggregateInput
    _max?: SessionIdMaxOrderByAggregateInput
    _min?: SessionIdMinOrderByAggregateInput
  }

  export type SessionIdScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionIdScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionIdScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionIdScalarWhereWithAggregatesInput>
    sessionId?: StringWithAggregatesFilter | string
    expiration?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    username: string
    teacher: boolean
    sessions?: SessionIdCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    username: string
    teacher: boolean
    sessions?: SessionIdUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    teacher?: BoolFieldUpdateOperationsInput | boolean
    sessions?: SessionIdUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    teacher?: BoolFieldUpdateOperationsInput | boolean
    sessions?: SessionIdUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    teacher?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    teacher?: BoolFieldUpdateOperationsInput | boolean
  }

  export type inviteLinksCreateInput = {
    id?: string
    teacherId: string
    classId: string
    maxUses: number
  }

  export type inviteLinksUncheckedCreateInput = {
    id?: string
    teacherId: string
    classId: string
    maxUses: number
  }

  export type inviteLinksUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    maxUses?: IntFieldUpdateOperationsInput | number
  }

  export type inviteLinksUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    maxUses?: IntFieldUpdateOperationsInput | number
  }

  export type inviteLinksUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    maxUses?: IntFieldUpdateOperationsInput | number
  }

  export type inviteLinksUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    maxUses?: IntFieldUpdateOperationsInput | number
  }

  export type StudentsCreateInput = {
    userId: string
    admin: boolean
  }

  export type StudentsUncheckedCreateInput = {
    id?: number
    userId: string
    admin: boolean
  }

  export type StudentsUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StudentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StudentsUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StudentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SurveysCreateInput = {
    teacherId: string
  }

  export type SurveysUncheckedCreateInput = {
    id?: number
    teacherId: string
  }

  export type SurveysUpdateInput = {
    teacherId?: StringFieldUpdateOperationsInput | string
  }

  export type SurveysUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: StringFieldUpdateOperationsInput | string
  }

  export type SurveysUpdateManyMutationInput = {
    teacherId?: StringFieldUpdateOperationsInput | string
  }

  export type SurveysUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionsCreateInput = {
    value: string
    type: string
    surveyId: string
  }

  export type QuestionsUncheckedCreateInput = {
    id?: number
    value: string
    type: string
    surveyId: string
  }

  export type QuestionsUpdateInput = {
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionsUpdateManyMutationInput = {
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionIdCreateInput = {
    sessionId?: string
    expiration: string
    User: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionIdUncheckedCreateInput = {
    sessionId?: string
    expiration: string
    userId: string
  }

  export type SessionIdUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    expiration?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionIdUncheckedUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    expiration?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionIdUpdateManyMutationInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    expiration?: StringFieldUpdateOperationsInput | string
  }

  export type SessionIdUncheckedUpdateManyInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    expiration?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type SessionIdListRelationFilter = {
    every?: SessionIdWhereInput
    some?: SessionIdWhereInput
    none?: SessionIdWhereInput
  }

  export type SessionIdOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    teacher?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    teacher?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    teacher?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type inviteLinksCountOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    maxUses?: SortOrder
  }

  export type inviteLinksAvgOrderByAggregateInput = {
    maxUses?: SortOrder
  }

  export type inviteLinksMaxOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    maxUses?: SortOrder
  }

  export type inviteLinksMinOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    maxUses?: SortOrder
  }

  export type inviteLinksSumOrderByAggregateInput = {
    maxUses?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StudentsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    admin?: SortOrder
  }

  export type StudentsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StudentsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    admin?: SortOrder
  }

  export type StudentsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    admin?: SortOrder
  }

  export type StudentsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SurveysCountOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
  }

  export type SurveysAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SurveysMaxOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
  }

  export type SurveysMinOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
  }

  export type SurveysSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type QuestionsCountOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    type?: SortOrder
    surveyId?: SortOrder
  }

  export type QuestionsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type QuestionsMaxOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    type?: SortOrder
    surveyId?: SortOrder
  }

  export type QuestionsMinOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    type?: SortOrder
    surveyId?: SortOrder
  }

  export type QuestionsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionIdCountOrderByAggregateInput = {
    sessionId?: SortOrder
    expiration?: SortOrder
    userId?: SortOrder
  }

  export type SessionIdMaxOrderByAggregateInput = {
    sessionId?: SortOrder
    expiration?: SortOrder
    userId?: SortOrder
  }

  export type SessionIdMinOrderByAggregateInput = {
    sessionId?: SortOrder
    expiration?: SortOrder
    userId?: SortOrder
  }

  export type SessionIdCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionIdCreateWithoutUserInput>, Enumerable<SessionIdUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionIdCreateOrConnectWithoutUserInput>
    connect?: Enumerable<SessionIdWhereUniqueInput>
  }

  export type SessionIdUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionIdCreateWithoutUserInput>, Enumerable<SessionIdUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionIdCreateOrConnectWithoutUserInput>
    connect?: Enumerable<SessionIdWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type SessionIdUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionIdCreateWithoutUserInput>, Enumerable<SessionIdUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionIdCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionIdUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<SessionIdWhereUniqueInput>
    disconnect?: Enumerable<SessionIdWhereUniqueInput>
    delete?: Enumerable<SessionIdWhereUniqueInput>
    connect?: Enumerable<SessionIdWhereUniqueInput>
    update?: Enumerable<SessionIdUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionIdUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionIdScalarWhereInput>
  }

  export type SessionIdUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionIdCreateWithoutUserInput>, Enumerable<SessionIdUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionIdCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionIdUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<SessionIdWhereUniqueInput>
    disconnect?: Enumerable<SessionIdWhereUniqueInput>
    delete?: Enumerable<SessionIdWhereUniqueInput>
    connect?: Enumerable<SessionIdWhereUniqueInput>
    update?: Enumerable<SessionIdUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionIdUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionIdScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type SessionIdCreateWithoutUserInput = {
    sessionId?: string
    expiration: string
  }

  export type SessionIdUncheckedCreateWithoutUserInput = {
    sessionId?: string
    expiration: string
  }

  export type SessionIdCreateOrConnectWithoutUserInput = {
    where: SessionIdWhereUniqueInput
    create: XOR<SessionIdCreateWithoutUserInput, SessionIdUncheckedCreateWithoutUserInput>
  }

  export type SessionIdUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionIdWhereUniqueInput
    update: XOR<SessionIdUpdateWithoutUserInput, SessionIdUncheckedUpdateWithoutUserInput>
    create: XOR<SessionIdCreateWithoutUserInput, SessionIdUncheckedCreateWithoutUserInput>
  }

  export type SessionIdUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionIdWhereUniqueInput
    data: XOR<SessionIdUpdateWithoutUserInput, SessionIdUncheckedUpdateWithoutUserInput>
  }

  export type SessionIdUpdateManyWithWhereWithoutUserInput = {
    where: SessionIdScalarWhereInput
    data: XOR<SessionIdUpdateManyMutationInput, SessionIdUncheckedUpdateManyWithoutSessionsInput>
  }

  export type SessionIdScalarWhereInput = {
    AND?: Enumerable<SessionIdScalarWhereInput>
    OR?: Enumerable<SessionIdScalarWhereInput>
    NOT?: Enumerable<SessionIdScalarWhereInput>
    sessionId?: StringFilter | string
    expiration?: StringFilter | string
    userId?: StringFilter | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    password: string
    username: string
    teacher: boolean
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    password: string
    username: string
    teacher: boolean
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    teacher?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    teacher?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionIdUpdateWithoutUserInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    expiration?: StringFieldUpdateOperationsInput | string
  }

  export type SessionIdUncheckedUpdateWithoutUserInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    expiration?: StringFieldUpdateOperationsInput | string
  }

  export type SessionIdUncheckedUpdateManyWithoutSessionsInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    expiration?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}